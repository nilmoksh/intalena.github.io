[
  {
    "id": 1,
    "name": "Hibernate One to One Many ",
    "description": " Hibernate One to One Mapping is created using @onetoonemapping,Data is persisted across tables using a foreign key.Mapping is created with @OneToOne annotation and using @joincolumn with unique=true on owner side, On the inverse end mappedBy is used to refer to attribute on owner side.",
    "mapping": " ",
    "queries":" ",
    "cheatsheet" :"/intalena.github.io/assets/documents/HibernateOneToOne.docx"

   
  },
  {
    "id": 2,
    "name": "Hibernate One to Many Mapping",
    "description": "Hibernate bidirectional one to many is created using @ManyToOne  annotation on the owner side, the foreign column is added using @JoinColumn on owner side. @OnetoMany annotation is used on inverse side used with mappedBy attribute referencing owner side reference. fetch=FetchType.LAZY, cascade=CascadeType.PERSIST is used to for lazy loading and cascadeType.persist for cascade.<p>",
    "mapping": " ",
    "queries":" ",
    "cheatsheet" :"/intalena.github.io/assets/documents/HibernateOneToMany.docx"

   
  },
  {
    "id": 3,
    "name": "Hibernate Many To Many Mapping",
    "description":"Hibernate manytomany mapping is creating using join table also called linked table which has foreignkey from both the table, Owner Side has @manytomany annotation with joincolumn and inversejoincolumn for owner and inverse end resp, Inverse end has @manytomany annotation with mappedby to reference attribute on owner side.",
    "mapping": " ",
    "queries":" ",
    "cheatsheet" :"/intalena.github.io/assets/documents/HibernateManyToMany.docx"
 },
  {
    "id": 4,
    "name": "Hibernate Single Class Inheritance Mapping",
    "description": "Its default strategy for creating inheritance mapping,Inheritance hierarchy is persisted in single table,Polymorphic queries gives better performance, Only downside is it does not allow null constraints.",
    "mapping": "strategy=InheritancyType.SINGLE_TABLE,Discriminator column identifies the type and the subclass",
    "queries": "Polymorphic queries don’t have joins ,Querying Superclass and Derived classes.",
    "cheatsheet": "/intalena.github.io/assets/documents/InheritanceSingleTable.docx"
   },
  {
    "id": 5,
    "name": "Hibernate Joined Class Inheritance Mapping",
    "description": "Hibernate Inheritance Joined Strategy has both Super Class and Subclasses have their own table,Subclass table only has attributes of its own and not of super class.Polymorphic queries gives poor better performance ..",
    "mapping": "",
    "queries": "",
    "cheatsheet" :"/intalena.github.io/assets/documents/InheritanceJoinedTable.docx "
}
]
